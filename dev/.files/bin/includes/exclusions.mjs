/**
 * Exclusions.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import path from 'node:path';
import { $obj, $path } from '../../../../node_modules/@clevercanyon/utilities/dist/index.js';

/**
 * Converts an array of exclusions into regular expression strings.
 *
 * @param   globs Array of exclusion globs.
 *
 * @returns       Exclusions as regular expression strings.
 */
const asRegExpStrings = (globs) => [...new Set(globs)].map((glob) => $path.globToRegExpString(glob));

/**
 * Converts an array of exclusions into regular expressions.
 *
 * @param   globs Array of exclusion globs.
 *
 * @returns       Exclusions as regular expressions.
 */
const asRegExps = (globs) => asRegExpStrings(globs).map((rxs) => new RegExp(rxs, 'ui'));

/**
 * Converts an array of exclusions into relative globs.
 *
 * @param   from  From path.
 * @param   globs Array of exclusion globs.
 *
 * @returns       Exclusions as relative globs.
 */
const asRelativeGlobs = (from, globs) => {
	return [...new Set(globs)].map((glob) => {
		return /^\*\*/u.test(glob) ? glob : path.relative(from, glob);
	});
};

/**
 * Converts an array of exclusions into negated globs.
 *
 * @param   globs Array of exclusion globs.
 *
 * @returns       Exclusions as negated globs.
 *
 * @note We don’t re-include anything that’s already a negation.
 */
const asNegatedGlobs = (globs) => [...new Set(globs)].filter((glob) => !/^!/u.test(glob)).map((glob) => '!' + glob);

/**
 * Defines exclusions globs.
 *
 * Note: `{}` brace expansions are not compatible with TypeScript’s config file. Everything listed here should follow
 * `.gitignore|.npmignore` syntax first, then be converted from `.gitignore` into a fast-glob pattern.
 */
export default {
	/**
	 * Default Git/NPM ignores, by category. Categories added to the default export here. Provided by
	 * `@clevercanyon/utilities`. Includes everything we have in our default `./.gitignore`, `./.npmignore`.
	 */
	...$obj.map($path.defaultGitNPMIgnoresByCategory, (category) => {
		return category.map((gitIgnore) => $path.gitIgnoreToGlob(gitIgnore));
	}),

	/**
	 * We intentionally use our 'default' NPM ignores when pruning; i.e., as opposed to using the current and
	 * potentially customized `./.npmignore` file in the current project directory. The reason is because we intend to
	 * enforce our standards. For further details {@see https://o5p.me/MuskgW}.
	 */
	defaultNPMIgnores: $path.defaultNPMIgnores.map((npmIgnore) => {
		return $path.gitIgnoreToGlob(npmIgnore);
	}),

	/**
	 * Specifically for use in our projects.
	 */
	adhocXIgnores: ['**/x-*/**'], // For special use cases.

	/**
	 * Utilities.
	 */
	asRegExps,
	asRegExpStrings,
	asRelativeGlobs,
	asNegatedGlobs,
};
